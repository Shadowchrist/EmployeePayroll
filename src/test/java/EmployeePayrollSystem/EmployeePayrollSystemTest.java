/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package EmployeePayrollSystem;

import org.junit.Test;

import com.practice.EmployeePayrollSystem.DatabaseOperations;
import com.practice.EmployeePayrollSystem.DatabaseOperations.IOService;
import com.practice.EmployeePayrollSystem.Employee;

import static org.junit.Assert.*;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.junit.Assert;

public class EmployeePayrollSystemTest {
	@Test
	public void given3EmployeesWhenWrittenToFileShouldMatchNumberOfEmployeeEntries() {
		Employee[] arrayOfEmployees = {
				new Employee(1, "Bill", 800000.0, LocalDate.of(2019, 01, 01)),
				new Employee(2, "Teresa", 850000.0, LocalDate.of(2018, 05, 29)),
				new Employee(3, "Mark", 900000.0, LocalDate.of(2019, 12, 01)) 
				};

		DatabaseOperations payrollServiceObject = new DatabaseOperations(Arrays.asList(arrayOfEmployees));
		payrollServiceObject.writeEmployeeData(IOService.FILE_IO);
		payrollServiceObject.printEmployee(IOService.FILE_IO);
		Assert.assertEquals(3, payrollServiceObject.countEnteries(IOService.FILE_IO));
	}

	@Test
	public void given3EmployeesWhenReadFromFileShouldMatchNumberOfEmployeeEntries() {

		DatabaseOperations payrollServiceObject = new DatabaseOperations();
		payrollServiceObject.readEmployeeData(IOService.FILE_IO);
		int countOfEntriesRead = payrollServiceObject.sizeOfEmployeeList();
		Assert.assertEquals(3, countOfEntriesRead);
	}

	@Test
	public void givenEmployeePayrollInDB_WhenRetrieved_ShouldMatchEmployeeCount() {

		DatabaseOperations payrollServiceObject = new DatabaseOperations();
		payrollServiceObject.readEmployeeData(IOService.DB_IO);
		int countOfEntriesRetrieved = payrollServiceObject.sizeOfEmployeeList();
		payrollServiceObject.printEmployee(IOService.DB_IO);
		Assert.assertEquals(5, countOfEntriesRetrieved);
	}

	@Test
	public void givenNewSalaryForEmployee_WhenUpdated_ShouldSyncWithDB() {
		try {
			DatabaseOperations payrollServiceObject = new DatabaseOperations();
			payrollServiceObject.readEmployeeData(IOService.DB_IO);
			payrollServiceObject.updateEmployeeSalary("Teresa", 3000000.0);
			boolean result = payrollServiceObject.checkEmployeePayrollInSyncWithDB("Teresa");
			Assert.assertTrue(result);
		}catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Test
	public void givenDateRange_WhenRetrieved_ShouldMatchEmployeeCount() {
		DatabaseOperations payrollServiceObject = new DatabaseOperations();
		payrollServiceObject.readEmployeeData(IOService.DB_IO);
		LocalDate startDate = LocalDate.of(2019, 01, 01);
		LocalDate endDate = LocalDate.now();
		List<Employee> employeePayrollData = payrollServiceObject.readEmployeeDataForDateRange(IOService.DB_IO, startDate, endDate);
		Assert.assertEquals(3, employeePayrollData.size());
	}

	@Test
	public void givenPayrollDataInDB_WhenAverageSalaryRetrievedByGender_ShouldReturnProperValue() {
		DatabaseOperations payrollServiceObject = new DatabaseOperations();
		payrollServiceObject.readEmployeeData(IOService.DB_IO);
		Map<String, Double> averageSalaryByGender = payrollServiceObject.readAverageSalaryByGender(IOService.DB_IO);
		Assert.assertTrue(averageSalaryByGender.get("M").equals(1500000.0) && 
						  averageSalaryByGender.get("F").equals(3000000.0));
	}
}
